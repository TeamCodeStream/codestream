<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
//     This code was generated by a tool.
//     Generated On: <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.LanguageServer.Client;
using Microsoft.VisualStudio.Utilities;
using System.ComponentModel.Composition;
// ReSharper disable All

namespace CodeStream.VisualStudio.Shared.LanguageServer
{
	#pragma warning disable 0649

    public class ContentDefinitions
    {

		[Export]
        [Name("CodeStream")]
        [BaseDefinition(CodeRemoteContentDefinition.CodeRemoteContentTypeName)]
        internal static ContentTypeDefinition CodeStreamContentTypeDefinition;

        [Export]
        [FileExtension(".codestream")]
        [ContentType("CodeStream")]
        internal static FileExtensionToContentTypeDefinition CodeStreamFileExtensionDefinition;
	
<# 
	// we don't want to include extensions that have already been registered by visual studio
	// they will be part of ContentTypesVisualStudio

	var excludedContent = File.ReadAllLines(Host.ResolvePath("FileExtensionExclusions.txt")).ToList();

	string genericContent = File.ReadAllText(Host.ResolvePath("FileExtensionsGeneric.txt"));
	var genericContentTypes = genericContent.Split(new [] {','}).Select(_ => _.Replace("\"","").ToLower()).Distinct().OrderBy(_ => _);
    foreach(var b in genericContentTypes) {
	
		if (excludedContent.Any(_ => _ == b)) {		
			continue;
		}		
	#>		
		[Export]
		[FileExtension("<#=b#>")]
		[ContentType("CodeStream")]
		internal static FileExtensionToContentTypeDefinition CodeStream<#=Sanitize(b)#>FileExtensionDefinition;
	<# } #>

	<#     
	
	// only show lines that start with a plus sign (+)
     var visualStudioContentTypes = File.ReadAllLines(Host.ResolvePath("ContentTypesVisualStudio.txt")).ToList()
				.Where(_ => _.IndexOf("+") == 0).OrderBy(_ => _).ToList();
	 var regex = new Regex("{(.*)}");
	  
	 var builtInContentTypes = new List<string>();
	 foreach(var x in visualStudioContentTypes){
		var match = regex.Match(x);
		if(match.Success)
		{
			builtInContentTypes.Add(match.Groups[1].Value);		
		}
	 } 

	foreach(var b in builtInContentTypes) {#>	

	[Export]
    [Name("<#=b#>")]
    [BaseDefinition(CodeRemoteContentDefinition.CodeRemoteContentTypeName)]
    internal static ContentTypeDefinition <#=Sanitize(b)#>ContentTypeDefinition;
	<# } #>

	}

	 
	<#foreach(var b in builtInContentTypes) {#>	
	[ContentType("<#=b#>")]<# } #>

	[ContentType("CodeStream")]
	public partial class LanguageClient 
	{	
	}
 

	#pragma warning restore 0649
}



<#+   // Must be at the end

private string Sanitize(string s)
{
    return s.Replace("#","Sharp")
	.Replace("+","Plus")
	.Replace("/","_")
	.Replace(".","")
	.Replace("$","")
	.Replace("-","_")	
	.Replace(" ","_");
}
#>
