"use strict";

import { describe, expect, it } from "@jest/globals";
import { Parser } from "../../../../src/managers/stackTraceParsers/goStackTraceParser";

describe("goStackTraceParser", () => {
	describe("golang", () => {
		it("console app macOS", () => {
			const str = `goagent.(*txn).WriteHeader (/work/src/github.com/foobar/msmith/vendor/github.com/newrelic/goagent/internal_txn.go:202)
			goagent.wrapCFH.WriteHeader (<autogenerated>:445)
			stats.(*recorderResponseWriter).WriteHeader (/work/src/github.com/foobar/msmith/vendor/github.com/abc/stats/recorder.go:38)
			middlewares.(*responseRecorder).WriteHeader (/work/src/github.com/foobar/msmith/middlewares/stats.go:56)
			foooo.(*responseWriter).WriteHeader (/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/response_writer.go:53)
			middlewares.(*Retry).ServeHTTP (/work/src/github.com/foobar/msmith/middlewares/retry.go:64)
			foooo.Wrap.func1 (/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go:41)
			foooo.HandlerFunc.ServeHTTP (/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go:24)
			foooo.middleware.ServeHTTP (/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go:33)`;

			const result = Parser(str);
			expect(result).toEqual({
				language: "go",
				lines: [
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/newrelic/goagent/internal_txn.go",
						line: 202,
						namespace: "goagent.(*txn)",
						method: "WriteHeader",
						fullMethod: "goagent.(*txn).WriteHeader",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath: "<autogenerated>",
						line: 445,
						namespace: "goagent.wrapCFH",
						method: "WriteHeader",
						fullMethod: "goagent.wrapCFH.WriteHeader",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/abc/stats/recorder.go",
						line: 38,
						namespace: "stats.(*recorderResponseWriter)",
						method: "WriteHeader",
						fullMethod: "stats.(*recorderResponseWriter).WriteHeader",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath: "/work/src/github.com/foobar/msmith/middlewares/stats.go",
						line: 56,
						namespace: "middlewares.(*responseRecorder)",
						method: "WriteHeader",
						fullMethod: "middlewares.(*responseRecorder).WriteHeader",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/response_writer.go",
						line: 53,
						namespace: "foooo.(*responseWriter)",
						method: "WriteHeader",
						fullMethod: "foooo.(*responseWriter).WriteHeader",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath: "/work/src/github.com/foobar/msmith/middlewares/retry.go",
						line: 64,
						namespace: "middlewares.(*Retry)",
						method: "ServeHTTP",
						fullMethod: "middlewares.(*Retry).ServeHTTP",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go",
						line: 41,
						namespace: "foooo.Wrap",
						method: "func1",
						fullMethod: "foooo.Wrap.func1",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go",
						line: 24,
						namespace: "foooo.HandlerFunc",
						method: "ServeHTTP",
						fullMethod: "foooo.HandlerFunc.ServeHTTP",
					},
					{
						arguments: undefined,
						column: undefined,
						fileFullPath:
							"/work/src/github.com/foobar/msmith/vendor/github.com/something/foooo/foooo.go",
						line: 33,
						namespace: "foooo.middleware",
						method: "ServeHTTP",
						fullMethod: "foooo.middleware.ServeHTTP",
					},
				],
				text: str,
			});
		});
	});
});
